library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity reservation_state is

 port (instr_valid_in:in std_logic;
 	   op_code_in:in std_logic_vector(3 downto 0);
 	   op_cz_in: in std_logic_vector(1 downto 0);
 	   destn_code_in:in std_logic_vector(2 downto 0);
 	   opr1_code_in:in std_logic_vector(2 downto 0);
 	   opr2_code_in:in std_logic_vector(2 downto 0);
 	   curr_pc_in: in std_logic_vector(15 downto 0);
 	   next_pc_in:in std_logic_vector(15 downto 0);
 	   imm_in:in std_logic_vector(15 downto 0);
 	   btag_in:in std_logic_vector(2 downto 0);
 	   self_tag_in:in std_logic_vector(2 downto 0);
 	   reset_system:in std_logic;--to be done at start of cycle general reset which assigns all registers its original values
 	   --reset_system_mapping:in std_logic;--to be used to clear all assigned ARF and RRF's 
       clk_input:in std_logic;
       stall_reservation_update:in std_logic;

       alu_instr_valid_out:out array (0 to 29) of std_logic;
       alu_op_code_out:out array (0 to 20) of std_logic_vector(3 downto 0);
       alu_op_code_cz_out:out array (0 to 29) of std_logic_vector(3 downto 0);
       alu_destn_rename_code_out:out arrray	(0 to 29) of std_logic_vector(5 downto 0);
       alu_operand1_out:out array (0 to 29) of std_logic_vector(15 downto 0);
       alu_valid1_out:out array(0 to 29) of std_logic;

       alu_operand2_out:out array (0 to 29) of std_logic_vector(15 downto 0);
       alu_valid2_out:out array (0 to 29) of std_logic_vector(15 downto 0);

       alu_operand3_out:out array (0 to 29) of std_logic_vector(15 downto 0);
       alu_valid3_out:out array (0 to 29) of std_logic_vector(15 downto 0);

       alu_c_flag_out:out array (0 to 29) of std_logic;
       alu_c_flag_rename:out array(0 to 29) of std_logic(2 downto 0);
       alu_z_flag_valid:out array(0 to 29) of std_logic;

       alu_z_flag_out:out array (0 to 29) of std_logic;
       alu_z_flag_rename:out array(0 to 29) of std_logic_vector(2 downto 0);
       alu_z_flag_valid:out array(0 to 29) of std_logic;

       alu_scheduler_valid:out array(0 to 29) of std_logic;

       alu_btag_out:out array(0 to 29) of std_logic_vector(2 downto 0);

       alu_orign_destn:out array(0 to 29) of std_logic_vector(2 downto 0)





       );

end entity;


architecture reservation_process of reservation_state is

signal arf_rename_valid:array(0 to 29) of std_logic:=(others=>'0');
--signal arf_reg_name:array(0 to 29) of std_logic_vector(2 downto 0);
signal arf_reg_rename:array(0 to 29) of std_logic_vector(5 downto 0);
signal arf_reg_value:array(0 to 29) of std_logic_vector(15 downto 0);--refers to value stored 
signal arf_value_valid:array(0 to 29) of std_logic;

signal free_reg: std_logic_vector (63 downto 0);--denotes which registers are free 

signal first_free_rename:array(0 to 1) of std_logic_vector(5 downto 0); --denotes the first rename register
signal rename_free:std_logic;--whether rename register is free or not.

begin

process(free_reg)

 variable rename_free_var:unsigned ='0';
 variable free_reg_repr:integer range 0 to 2**63;
 variable i:integer range 0 to 2**63;
 variable count:=integer range 0 to 2;
 variable current_position:=integer range 0 to 63;
 variable first_free_rename_var:array(0 to 1) of std_logic_vector(5 downto 0); --denotes the first rename register
  begin
   
    --if (free_reg(0)='1' and free_reg(1)='1') then
      --rename_free<='1';
      --first_free_rename(0)<=std_logic_vector(to_unsigned(0,6));
    
      --first_free_rename(1)<=std_logic_vector(to_unsigned(1,6));
    rename_free_var:='0';
    free_reg_repr:=to_integer(to_unsigned(free_reg));
    count:=0
    i:=to_integer(to_unsigned(free_reg));
    current_position:=0;
    first_free_rename_var:=(others=>(others=>'0'));
    --for i in 0 to 59 loop
     --for j in 0 to 59 loop
    
     while (i >= 0) loop

      if (i mod 2 = 1) then
        first_free_rename_var(count):=to_unsigned(current_position,6);
        count:=count+1;
      end if;
      current_position:=current_position+1;

      exit when count=2;

      i=i/2;
        

      
     	
     end loop;


     if (count<=2) then

      rename_free<='0';
      
     else 
      rename_free<='1';

     end if;
     
     first_free_rename<=first_free_rename_var; 
         





    --end loop;
        

    --end if;


  end process;

--process()

--  begin 

--  if (clk_input'event='1' and clk_input='1' and stall_reservation_update='1') then
    
--    if (reset_system='1') then
--      free_reg<=(others=>'0');
--      arf_rename_valid<=(others=>'0');
--      arf_reg_rename<=(others=>(others=>'0'));
--      arf_reg_value<=(others=>(others=>'0'));
--      arf_value_valid<=(others=>'0');


--    else 







--    end if;

 
--   end if;


--end process;   
 


   

	
end architecture reservation_process;